{
  "contractName": "register",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/register.sol\":\"register\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/register.sol\":{\"keccak256\":\"0x26816589c8bdd882836f3998e00fa6b7b63b06e4e1648c840bad0fe29f07786d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://2f18b53e2ea69f28d9701faf3c05fb51d64dc609148fcc1b4c2de186b589609e\",\"dweb:/ipfs/QmcypE6Zwr4Cx86pHsL1mMoa7Vg4eGN4akZ8TGX3k4s7dZ\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f1847b7900ad81964be5b4aec6198ceabf77ee02741fa29f6107c4872ccf5b2164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220f1847b7900ad81964be5b4aec6198ceabf77ee02741fa29f6107c4872ccf5b2164736f6c63430008110033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "73:2998:1:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "73:2998:1:-:0;;;;;",
  "source": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <=0.9.0;\r\n\r\ncontract register{\r\n\r\n    // struct patientDetails{\r\n    //     string name;\r\n    //     uint64 phone;\r\n    //     string mail;\r\n    //     string residentAddress;\r\n    // }\r\n\r\n    // struct hospitalDetails{\r\n    //     string name;\r\n    //     uint64 phone;\r\n    //     string mail;\r\n    //     string hospitalAddress;\r\n    // }\r\n\r\n    // address admin = 0x0C94a7382420E02cF69b2FE7e0cB24d0fa79CcDF;\r\n    // mapping (address => patientDetails) patient;\r\n    // mapping (address => hospitalDetails) hospital;\r\n    // hospitalDetails[] hospitals;\r\n\r\n    // function registerPatient(address _publicAddress, string memory _name, uint64 _phone, string memory _mail, string memory _residentAddress) public{\r\n    //     patient[_publicAddress] = patientDetails(_name, _phone, _mail, _residentAddress);\r\n    // }\r\n\r\n    // function registerhospital(address _publicAddress,  string memory _name, uint64 _phone, string memory _mail, string memory _hospitalAddress) public{\r\n    //     hospital[_publicAddress] = hospitalDetails(_name, _phone, _mail, _hospitalAddress);\r\n    //     hospitals.push(hospitalDetails(_name, _phone, _mail, _hospitalAddress));\r\n    // }\r\n\r\n    // function updatePatient(address _publicAddress, string memory _name, uint64 _phone, string memory _mail, string memory _residentAddress) public {\r\n    //     patientDetails storage pd = patient[_publicAddress];\r\n    //     pd.name = _name;\r\n    //     pd.phone = _phone;\r\n    //     pd.mail = _mail;\r\n    //     pd.residentAddress = _residentAddress;\r\n    // }\r\n\r\n    //  function updatehospital(address _publicAddress,  string memory _name, uint64 _phone, string memory _mail, string memory _hospitalAddress) public{\r\n    //     hospitalDetails storage dd = hospital[_publicAddress];\r\n    //     dd.name = _name;\r\n    //     dd.phone = _phone;\r\n    //     dd.mail = _mail;\r\n    //     dd.hospitalAddress = _hospitalAddress;\r\n    // }\r\n\r\n    // function check(address _publicAddress) public view returns(string memory)\r\n    // {\r\n    //     string memory user = \"none\";\r\n    //     if(_publicAddress == admin)\r\n    //     {\r\n    //         user = \"admin\";\r\n    //     }\r\n    //     if(!(keccak256(abi.encodePacked((patient[_publicAddress].name))) == keccak256(abi.encodePacked((\"\")))))\r\n    //     {\r\n    //         user = \"patient\";\r\n    //     }\r\n    //     if(!(keccak256(abi.encodePacked((hospital[_publicAddress].name))) == keccak256(abi.encodePacked((\"\")))))\r\n    //     {\r\n    //         user = \"hospital\";\r\n    //     }\r\n    //     return user;\r\n    // }\r\n\r\n    // function getAllHospital() public view returns(hospitalDetails[] memory)\r\n    // {\r\n    //     return hospitals;\r\n    // }\r\n\r\n    // function getPatientDetail(address _publicAddress) public view returns(patientDetails memory)\r\n    // {\r\n    //     return patient[_publicAddress];\r\n    // }\r\n\r\n    //  function getHospitalDetail(address _publicAddress) public view returns(hospitalDetails memory)\r\n    // {\r\n    //     return hospital[_publicAddress];\r\n    // }\r\n}",
  "sourcePath": "D:\\Blockchain\\blockchainTrial\\Backend\\contracts\\register.sol",
  "ast": {
    "absolutePath": "project:/contracts/register.sol",
    "exportedSymbols": {
      "register": [
        395
      ]
    },
    "id": 396,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 394,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<=",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:32:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "register",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 395,
        "linearizedBaseContracts": [
          395
        ],
        "name": "register",
        "nameLocation": "82:8:1",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 396,
        "src": "73:2998:1",
        "usedErrors": []
      }
    ],
    "src": "37:3034:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x794416F3719acC2309597938BB01c1bA0BB8B7f2",
      "transactionHash": "0x9bcf163ccc23b3dc3a9c89a8180de049be1eafde204a1d17ce78aae4a4046fd3"
    }
  },
  "schemaVersion": "3.4.12",
  "updatedAt": "2023-03-13T03:48:21.420Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}